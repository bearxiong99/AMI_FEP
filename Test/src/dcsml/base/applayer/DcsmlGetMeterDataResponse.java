package dcsml.base.applayer;

import java.io.IOException;
import java.math.BigInteger;

import cn.hexing.fk.utils.HexDump;

import com.hx.dlms.DecodeStream;

import dcsml.base.DcsmlOctetString;
import dcsml.base.DcsmlSequence;
import dcsml.base.DcsmlTagAdjunct;
import dcsml.base.DcsmlType;
import dcsml.base.DcsmlUnsigned16;
import dcsml.base.DcsmlUnsigned32;
import dcsml.base.ListOfDcsmlServerIdAnswers;
import dcsml.base.SmlTreePath;

public class DcsmlGetMeterDataResponse extends DcsmlSequence{

	/**
	 * 
	 */
	private static final long serialVersionUID = -5188658746959140889L;
	private DcsmlOctetString subscribeID = new DcsmlOctetString();//OPTIONAL
	private DcsmlUnsigned32 questionId = new DcsmlUnsigned32();
	private DcsmlUnsigned16 answerId = new DcsmlUnsigned16();
	private SmlTreePath parameterTreePath = new SmlTreePath();
	private ListOfDcsmlServerIdAnswers serverIdAnswers = new ListOfDcsmlServerIdAnswers();
	
	@Override
	public String toString(){

		StringBuilder sb = new StringBuilder();
		sb.append("\n\t\tquestionId:"+new BigInteger(questionId.getValue()));
		sb.append("\n\t\tanswerId:"+new BigInteger(answerId.getValue()));
		sb.append("\n\t\tparameterTreePath:"+parameterTreePath.toString());
		sb.append("\n\t\tserverIdAnswers:"+serverIdAnswers.toString());
		
		return sb.toString();
	}
	
	
	public DcsmlGetMeterDataResponse(){
		adjunct = DcsmlTagAdjunct.contextSpecificExplicit(0x10000801);
		subscribeID.setOptional(true);
		members = new DcsmlType[]{subscribeID,questionId,answerId,parameterTreePath,serverIdAnswers};
	}
	
	
	public static void main(String[] args) throws IOException {
		cccc00760700000000000362006200726500000201710163000C00
	
		SmlMessage sml = new SmlMessage();
		sml.decode(new DecodeStream(HexDump.toArray("760700000000000262006200726510001101720948584530303030310606C401810063001200")));
		System.out.println(sml.toString());
	
	}
	

}
