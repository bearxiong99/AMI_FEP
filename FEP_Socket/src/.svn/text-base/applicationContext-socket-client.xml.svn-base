<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for PetClinic on JDBC.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<!-- ========================= Socket通信框架对象定义 ========================= -->
	<!-- 异步Socket连接池框架事件处理适配器定义  -->

	<bean id="eventhandler.asyncSocketPool.onConnect"
		class="cn.hexing.fk.sockclient.async.event.adapt.OnClientConnected" />
	<bean id="eventhandler.asyncSocketPool.onClose"
		class="cn.hexing.fk.sockclient.async.event.adapt.OnClientClosed" />
	<bean id="eventhandler.asyncSocketPool.onRecvMsg"
		class="cn.hexing.fk.sockclient.async.event.adapt.OnClientRecvMsg" />
	<bean id="eventhandler.asyncSocketPool.onSendMsg"
		class="cn.hexing.fk.sockclient.async.event.adapt.OnClientSendMsg" />

	<!-- 异步Socket连接池框架事件处理器 定义  -->
	<bean id="eventhook.asyncSocketPool" abstract="true">
		<property name="minSize"><value>1</value></property>
		<property name="maxSize"><value>20</value></property>
		<property name="handlerMap">
			<map>
				<entry>
					<key><ref bean="EventType.CLIENT_CONNECTED" /></key>
					<ref bean="eventhandler.asyncSocketPool.onConnect" />
				</entry>
				<entry>
					<key><ref bean="EventType.CLIENTCLOSE" /></key>
					<ref bean="eventhandler.asyncSocketPool.onClose" />
				</entry>
				<entry>
					<key><ref bean="EventType.MSG_RECV" /></key>
					<ref bean="eventhandler.asyncSocketPool.onRecvMsg" />
				</entry>
				<entry>
					<key><ref bean="EventType.MSG_SENT" /></key>
					<ref bean="eventhandler.asyncSocketPool.onSendMsg" />
				</entry>
			</map>
		</property>
	</bean>

	<bean id="asyncpool.iohandler"
			class="cn.hexing.fk.sockserver.io.SimpleIoHandler"/>
			
	<bean id="asyncpool.base" abstract="true">
		<property name="peerIp" value="127.0.0.1"/>
		<property name="peerPort" value="10002"/>
		<property name="clientSize" value="2000"/>
		<property name="ioThreadSize" value="2"/>
		<property name="bufLength" value="256"/>
		<property name="timeout" value="180"/>
		<property name="messageCreator" ref="messageCreator.Zj"/>
		<property name="ioHandler" ref="asyncpool.iohandler"/>
	</bean>

	<bean id="asyncpool.simulator" class="cn.hexing.fk.sockclient.async.AsyncSocketPool"
		parent="asyncpool.base">
		<property name="peerIp" value="127.0.0.1"/>
		<property name="peerPort" value="10002"/>
		<property name="clientSize" value="2000"/>
		<property name="ioThreadSize" value="2"/>
	</bean>

	<!-- =========================客户端收发消息事件处理器 ========================= -->
	<bean id="rtu.client.event.handle" class="test.hzjbbis.fk.simulator.RtuClientEventHandler">
	</bean>
	<bean id="test.rtu.client" class="cn.hexing.fk.clientmod.ClientModule"
		parent="JSocket">
		<property name="moduleType" value="rtu.client"/>
		<property name="name" value="rtu.client"/>
		<property name="hostIp" value="10.136.34.69"/>
		<property name="hostPort" value="10002"/>
		<property name="bufLength" value="10240"/>
		<property name="messageCreator" ref="messageCreator.Zj"/>
		<property name="timeout" value="200000"/>
		<property name="txfs" value="02"/>
		<property name="heartInterval" value="100000"/>
		<property name="requestNum" value="500"/>
		<property name="eventHandler" ref="rtu.client.event.handle"/>
	</bean>

	<bean id="eventhook.simulator"
		class="cn.hexing.fk.sockclient.async.eventhandler.AsyncSocketEventHandler"
		parent="eventhook.asyncSocketPool">
	</bean>
	<!-- Cluster-clients example -->
	<bean id="cluster.clients.event-handle.example" class="cn.hexing.fk.clientmod.ClusterClientDefaultHandler">
	</bean>
	<bean id="cluster.clients.example" class="cn.hexing.fk.clientmod.ClusterClientModule">
		<property name="bufLength" value="10240"/>
		<property name="timeout" value="60"/>
		<property name="heartInterval" value="20"/>
		<property name="requestNum" value="500"/>
		<property name="eventHandler" ref="cluster.clients.event-handle.example"/>
		<property name="clients">
			<list>
				<bean class="cn.hexing.fk.clientmod.ClusterClientItem">
					<property name="usage" value="01"/>		<!-- 'zhuan bian' 'gong bian' 'diya jichao' -->
					<property name="hostIp" value="10.xxx.xxx"/>
					<property name="hostPort" value="10002"/>
				</bean>
				<bean class="cn.hexing.fk.clientmod.ClusterClientItem">
					<property name="usage" value="01"/>		<!-- 'zhuan bian' 'gong bian' 'diya jichao' -->
					<property name="hostIp" value="127.0.0.2"/>  <!-- BP address -->
					<property name="hostPort" value="10002"/>
				</bean>
				<bean class="cn.hexing.fk.clientmod.ClusterClientItem">
					<property name="usage" value="03"/>		<!-- 'zhuan bian' 'gong bian' 'diya jichao' -->
					<property name="deptCode" value="33401,33402,33403"/>	<!-- dishi daima -->
					<property name="hostIp" value="127.0.0.1"/>
					<property name="hostPort" value="10002"/>
				</bean>
			</list>
		</property>
	</bean>

</beans>
