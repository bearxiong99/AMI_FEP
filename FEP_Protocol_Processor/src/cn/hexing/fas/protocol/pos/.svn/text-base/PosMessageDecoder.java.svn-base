package cn.hexing.fas.protocol.pos;

import java.nio.ByteBuffer;

import cn.hexing.fas.model.pos.PosCommandResult;
import cn.hexing.fas.protocol.gw.parse.DataValue;
import cn.hexing.fas.protocol.pos.parse.DataItemParser;
import cn.hexing.fk.message.IMessage;
import cn.hexing.fk.message.msgbytes.MessageBytes;
import cn.hexing.fk.utils.HexDump;

/**
 * 
 * @author gaoll
 *
 * @time 2012-11-13 上午10:40:49
 *
 * @info pos机消息解码
 */
public class PosMessageDecoder extends AbstractMessageDecoder{

	private static PosMessageDecoder instance = new PosMessageDecoder();
	
	private PosMessageDecoder (){}
	
	public  static PosMessageDecoder getInstance(){return instance;}
	
	public static void main(String[] args) {
		MessageBytes mb = new MessageBytes();
		mb.setData(HexDump.toArray
		PosMessageDecoder.getInstance().decode(mb);
	}
	
	@Override
	public Object decode(IMessage message) {
		if(!(message instanceof MessageBytes)) return null;
		MessageBytes msg = (MessageBytes) message;
		ByteBuffer allFrame=ByteBuffer.wrap(msg.data);
		if(allFrame.remaining()<9) return null;
		byte[] head = new byte[9];
		allFrame.get(head, 0, 9);
		byte[] data = new byte[allFrame.remaining()];
		allFrame.get(data);
		byte func = head[8];
		String s_data=HexDump.toHex(data);
		PosCommandResult result = parase(func, s_data);
		result.setSeq(""+Integer.parseInt(HexDump.toHex(head[3])+HexDump.toHex(head[4])+HexDump.toHex(head[5])+HexDump.toHex(head[6]),16));
		return result;
	}
	
	public PosCommandResult parase(byte func,String data){
		DataValue value =null;
		PosCommandResult posCommand = new PosCommandResult();
		if(func==(byte)0xBC){//扩展格式
			//需要将头部取出来,判断是否是分帧上来的数据.
			String format=PosItemConfig.itemMap.get(""+(func&0xFF));
			DataValue valueHead=DataItemParser.parser(data, format, false);
			data=data.substring(valueHead.getLen());
			String[] results = valueHead.getValue().split("#");
			//HTB4#HTB4#HTB1#HTB1#HTB1
			//subId#version#分帧标识#分帧号#zip_flg
			posCommand.setSfFlag(Integer.parseInt(results[2]));
			posCommand.setClientVersion(Long.parseLong(results[1]));
			posCommand.setSubFun_c(Short.parseShort(results[0]));
			format=PosItemConfig.itemSubMap.get(results[0]);  //获得新协议的格式
			value=DataItemParser.parser(data, format, false);
			value.setLen(value.getLen()+valueHead.getLen());
			value.setValue(value.getValue());
		}else{
			String format = PosItemConfig.itemMap.get(""+Integer.parseInt(HexDump.toHex(func),16));
			value=DataItemParser.parser(data, format, false);
		}
		if(value==null) return null;
		posCommand.setFun_c(func);
		posCommand.setValue(value.getValue());
		return posCommand;
	}
	
	
	
	
	
	
	

}
