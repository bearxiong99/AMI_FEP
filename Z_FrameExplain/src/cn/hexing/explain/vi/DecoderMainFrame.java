package cn.hexing.explain.vi;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Dimension;
import java.awt.Toolkit;

import javax.swing.JOptionPane;

import cn.hexing.explain.decoder.DlmsDecoder;

/**
 * 
 * @author gaoll
 *
 * @time 2013-4-24 上午09:48:56
 *
 * @info
 */
public class DecoderMainFrame extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public enum PROTOCOL_MODE{DLMS,GW376_1,ZJGY};
    
    public PROTOCOL_MODE protocolMode = PROTOCOL_MODE.DLMS;
    
    public String[] protocolName = new String[]{"DLMS","国网376.1","浙江规约"};
    /**
     * Creates new form DecoderMainFrame
     */
    public DecoderMainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        c_protocolType = new javax.swing.JComboBox();
        t_frameContent = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_result = new javax.swing.JTextArea();
        b_explain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("规约类型：");

        c_protocolType.setModel(new javax.swing.DefaultComboBoxModel(protocolName));
        c_protocolType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                c_protocolTypeItemStateChanged(evt);
            }
        });

        jLabel3.setText("解析结果：");
        t_result.setLineWrap(true);
        t_result.setColumns(20);
        t_result.setRows(5);
        t_result.setAutoscrolls(false);
        jScrollPane1.setViewportView(t_result);

        b_explain.setText("解析");
        b_explain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_explainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_explain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(c_protocolType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(t_frameContent)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(c_protocolType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(t_frameContent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_explain))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void b_explainActionPerformed(java.awt.event.ActionEvent evt) {                                          
        //TODO:解析按钮处理
        //t_frameContent 内容是否为空
        
        //1.根据当前选择的规约类型
       int index=c_protocolType.getSelectedIndex();
       String rawFrame=t_frameContent.getText();
       try {
		if(checkStringIsNotNull(rawFrame)){
		       switch(index){
		       case 0:
		           //DLMS规约解析
		           //将解析的结果放在t_result
		    	   t_result.setText(DlmsDecoder.getInstance().decode(rawFrame));
		           break;
		       case 1:
		           //国网规约解析
		           showMsg("暂不支持解析");
		           break;
		       case 2:
		           //浙江规约解析
		           showMsg("暂不支持解析");
		           break;
		       }
		   }else{
			   showMsg("要解析的帧不能为空");
		   }
	} catch (Exception e) {
		showMsg(e.getMessage());
	}

    }                                         

    public boolean checkStringIsNotNull(String value){
        if(value==null || "".equals(value.trim())) return false;
        return true;
    
    }
    
    private void c_protocolTypeItemStateChanged(java.awt.event.ItemEvent evt) {                                                
        // TODO add your handling code here:
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED){
            if(protocolName[1].equals(evt.getItem().toString()) || protocolName[2].equals(evt.getItem().toString())){
                showMsg("暂不支持解析");
                c_protocolType.setSelectedIndex(0);
            }
        }
    }                                               

    public void showMsg(String msg ){
        JOptionPane.showMessageDialog(this, msg);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecoderMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecoderMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecoderMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecoderMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        final DecoderMainFrame mainFrame=new DecoderMainFrame();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	mainFrame.setVisible(true);
            	Toolkit kit = Toolkit.getDefaultToolkit();    // 定义工具包
                Dimension screenSize = kit.getScreenSize();   // 获取屏幕的尺寸
                int screenWidth = screenSize.width/2;         // 获取屏幕的宽
                int screenHeight = screenSize.height/2;       // 获取屏幕的高
                int height = mainFrame.getHeight();
                int width = mainFrame.getWidth();
                mainFrame.setLocation(screenWidth-width/2, screenHeight-height/2);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton b_explain;
    private javax.swing.JComboBox c_protocolType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField t_frameContent;
    private javax.swing.JTextArea t_result;
    // End of variables declaration                   
}
