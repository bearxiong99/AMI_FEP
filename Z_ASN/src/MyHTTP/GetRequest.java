/*
 * Generated by ASN.1 Java Compiler (http://www.asnlab.org/)
 * From ASN.1 module "MyHTTP"
 */
package MyHTTP;

import java.io.*;
import java.util.Date;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class GetRequest {

	@Component(0)
	public Boolean header_only;

	@Component(1)
	public Boolean lock;

	@Component(2)
	public AcceptTypes accept_types;

	@Component(3)
	public String url;

	@Component(4)
	public Date timestamp;


	public Object clone() {
		return TYPE.clone(this, CONVERTER);
	}

	public boolean equals(Object obj) {
		if(!(obj instanceof GetRequest)){
			return false;
		}
		return TYPE.equals(this, obj, CONVERTER);
	}

	public void print(PrintStream out) {
		TYPE.print(this, CONVERTER, out);
	}

	public void ber_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONVERTER, out);
	}

	public static GetRequest ber_decode(InputStream in) throws IOException {
		return (GetRequest)TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONVERTER);
	}


	public final static AsnType TYPE = MyHTTP.type(65540);

	public final static CompositeConverter CONVERTER;

	static {
		CONVERTER = new AnnotationCompositeConverter(GetRequest.class);
		AsnConverter header_onlyConverter = BooleanConverter.INSTANCE;
		AsnConverter lockConverter = BooleanConverter.INSTANCE;
		AsnConverter accept_typesConverter = AcceptTypes.CONVERTER;
		AsnConverter urlConverter = Url.CONVERTER;
		AsnConverter timestampConverter = DateConverter.INSTANCE;
		CONVERTER.setComponentConverters(new AsnConverter[] { header_onlyConverter, lockConverter, accept_typesConverter, urlConverter, timestampConverter });
	}

}
